package ppl.delite.runtime.scheduler

import java.util.ArrayDeque
import ppl.delite.runtime.codegen.DeliteExecutable
import ppl.delite.runtime.graph.ops.DeliteOP

/**
 * Author: Kevin J. Brown
 * Date: Oct 11, 2010
 * Time: 4:34:43 PM
 * 
 * Pervasive Parallelism Laboratory (PPL)
 * Stanford University
 */

/**
 * This class represents all the results generated by the walktime scheduler
 */
class StaticSchedule(val resources: Array[ArrayDeque[DeliteExecutable]]) {
  /**
   * Currently this class only holds a single scheduling object
   * The outer array represents the resources scheduled across
   * The inner ArrayDeque is the schedule for that resource
   * Designed to grow
   */
}

object PartialSchedule {
  def apply(numResources: Int) = {
    val r = new Array[ArrayDeque[DeliteOP]](numResources)
    for (i <- 0 until numResources) r(i) = new ArrayDeque[DeliteOP]
    new PartialSchedule(r)
  }

  def apply(resources: Array[ArrayDeque[DeliteOP]]) {
    new PartialSchedule(resources)
  }
}

class PartialSchedule(resources: Array[ArrayDeque[DeliteOP]]) {

  val numResources = resources.length

  def apply(idx: Int) = resources(idx)

  def slice(start: Int, end: Int) = new PartialSchedule(resources.slice(start,end))

  def foreach[U](f: ArrayDeque[DeliteOP] => U) = resources.foreach(f)

  def map[B](f: ArrayDeque[DeliteOP] => B) = resources.map(f)

  def withFilter(p: ArrayDeque[DeliteOP] => Boolean) = resources.withFilter(p)

  /**
   * Currently this class only holds a single scheduling object
   * The outer array represents the resources scheduled across
   * The inner ArrayDeque is the partial schedule of ops for that resource
   * Designed to grow
   */
}